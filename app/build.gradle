import com.plugin.TextPlugin1

// 插件的第一种用法
class TextPlugin implements Plugin<Project> {
    void apply(Project project) {
        project.task('textPlugin') {
            doLast {
                println 'Hello from the TextPlugin'
            }
        }
    }
}

apply plugin: TextPlugin

// 第二种用法
apply plugin: TextPlugin1

apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "com.example.textgradle"
        minSdkVersion 22
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        debugConfig {
            keyAlias "key"
            keyPassword "111111"
            storeFile file("/key.jks")
            storePassword "111111"
        }
        releaseConfig {
            keyAlias "key"
            keyPassword "111111"
            storeFile file("/key.jks")
            storePassword "111111"
        }
    }
    buildTypes {
        release {
            minifyEnabled false      // 删除无用java
//            shrinkResources = true  // 资源裁剪
//            zipAlignEnabled = true   // 内存对齐
            applicationIdSuffix ".release"
            signingConfig signingConfigs.releaseConfig
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            applicationIdSuffix ".debug"
            signingConfig signingConfigs.debugConfig
        }
    }

    flavorDimensions "1", "2"

    productFlavors {
        china {
            applicationId "com.example.china"
            buildConfigField "boolean", "isforeign", "true"
            resValue "string", "text_res_value", "B"
            dimension "1"
        }

        usa {
            applicationId "com.example.usa"
            buildConfigField "boolean", "isforeign", "false"
            resValue "string", "text_res_value", "C"
            dimension "1"
        }

        charge {
            versionCode 2
            dimension "2"
        }

        free {
            versionCode 3
            dimension "2"
        }
    }

    // 过滤掉free+debug
    variantFilter { variant ->
        def names = variant.flavors*.name
        def types = variant.buildType.name
        if (names.contains("free") && types == "debug") {
            setIgnore(true)
        }
    }
}

// Hook
android.applicationVariants.all { variant ->
    variant.outputs.all {
        outputFileName = "${variant.flavorName}-v${versionName}-${variant.buildType.name}-build${versionCode}-${releaseTime()}.apk"
    }
}

static def releaseTime() {
    return new Date().format("yyyy.MM.dd", TimeZone.getTimeZone("UTC"))
}

task text(dependsOn: hello) {

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
